# Managed by SaltStack zabbix-formula. Do not edit by hand.
{#- Convert all configuration keys to lowercase #}
{%- set lcfg = {} %}
{%- for k, v in cfg.items() %}
    {%- do lcfg.update({k|lower: v}) %}
{%- endfor %}
# This is a configuration file for Zabbix server daemon
# To get more information about Zabbix, visit http://www.zabbix.com

############ GENERAL PARAMETERS #################

### Option: ListenPort
#	Listen port for trapper.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# ListenPort=10051
{% if 'listenport' in lcfg %}
ListenPort={{ lcfg.listenport }}
{% endif %}
### Option: SourceIP
#	Source IP address for outgoing connections.
#
# Mandatory: no
# Default:
# SourceIP=
{% if 'sourceip' in lcfg %}
SourceIP={{ lcfg.sourceip }}
{% endif %}
### Option: LogType
#	Specifies where log messages are written to:
#		system  - syslog
#		file    - file specified with LogFile parameter
#		console - standard output
#
# Mandatory: no
# Default:
# LogType=file
{% if 'logtype' in lcfg %}
LogType={{ lcfg.logtype }}
{% endif %}
### Option: LogFile
#	Log file name for LogType 'file' parameter.
#
# Mandatory: yes, if LogType is set to file, otherwise no
# Default:
# LogFile=
{% if 'logfile' in lcfg %}
LogFile={{ lcfg.logfile }}
{% endif %}
### Option: LogFileSize
#	Maximum size of log file in MB.
#	0 - disable automatic log rotation.
#
# Mandatory: no
# Range: 0-1024
# Default:
# LogFileSize=1
{% if 'logfilesize' in lcfg %}
LogFileSize={{ lcfg.logfilesize }}
{% endif %}
### Option: DebugLevel
#	Specifies debug level:
#	0 - basic information about starting and stopping of Zabbix processes
#	1 - critical information
#	2 - error information
#	3 - warnings
#	4 - for debugging (produces lots of information)
#	5 - extended debugging (produces even more information)
#
# Mandatory: no
# Range: 0-5
# Default:
# DebugLevel=3
{% if 'debuglevel' in lcfg %}
DebugLevel={{ lcfg.debuglevel }}
{% endif %}
### Option: PidFile
#	Name of PID file.
#
# Mandatory: no
# Default:
# PidFile=/tmp/zabbix_server.pid
{% if 'pidfile' in lcfg %}
PidFile={{ lcfg.pidfile }}
{% endif %}
### Option: SocketDir
#	IPC socket directory.
#		Directory to store IPC sockets used by internal Zabbix services.
#
# Mandatory: no
# Default:
# SocketDir=/tmp
{% if 'socketdir' in lcfg %}
SocketDir={{ lcfg.socketdir }}
{% endif %}
### Option: DBHost
#	Database host name.
#	If set to localhost, socket is used for MySQL.
#	If set to empty string, socket is used for PostgreSQL.
#	If set to empty string, the Net Service Name connection method is used to connect to Oracle database; also see
#	the TNS_ADMIN environment variable to specify the directory where the tnsnames.ora file is located.
#
# Mandatory: no
# Default:
# DBHost=localhost
{% if 'dbhost' in lcfg %}
DBHost={{ lcfg.dbhost }}
{% endif %}
### Option: DBName
#	Database name.
#	If the Net Service Name connection method is used to connect to Oracle database, specify the service name from
#	the tnsnames.ora file or set to empty string; also see the TWO_TASK environment variable if DBName is set to
#	empty string.
#
# Mandatory: yes
# Default:
# DBName=
{% if 'dbname' in lcfg %}
DBName={{ lcfg.dbname }}
{% endif %}
### Option: DBSchema
#	Schema name. Used for PostgreSQL.
#
# Mandatory: no
# Default:
# DBSchema=
{% if 'dbschema' in lcfg %}
DBSchema={{ lcfg.dbschema }}
{% endif %}
### Option: DBUser
#	Database user.
#
# Mandatory: no
# Default:
# DBUser=
{% if 'dbuser' in lcfg %}
DBUser={{ lcfg.dbuser }}
{% endif %}
### Option: DBPassword
#	Database password.
#	Comment this line if no password is used.
#
# Mandatory: no
# Default:
# DBPassword=
{% if 'dbpassword' in lcfg %}
DBPassword={{ lcfg.dbpassword }}
{% endif %}
### Option: DBSocket
#	Path to MySQL socket.
#
# Mandatory: no
# Default:
# DBSocket=
{% if 'dbsocket' in lcfg %}
DBSocket={{ lcfg.dbsocket }}
{% endif %}
### Option: DBPort
#	Database port when not using local socket.
#	If the Net Service Name connection method is used to connect to Oracle database, the port number from the
#	tnsnames.ora file will be used. The port number set here will be ignored.
#
# Mandatory: no
# Range: 1024-65535
# Default:
# DBPort=
{% if 'dbport' in lcfg %}
DBPort={{ lcfg.dbport }}
{% endif %}
### Option: AllowUnsupportedDBVersions
#	Allow server to work with unsupported database versions.
#       0 - do not allow
#       1 - allow
#
# Mandatory: no
# Default:
# AllowUnsupportedDBVersions=0
{% if 'allowunsupporteddbversions' in lcfg %}
AllowUnsupportedDBVersions={{ lcfg.allowunsupporteddbversions }}
{% endif %}
### Option: HistoryStorageURL
#	History storage HTTP[S] URL.
#
# Mandatory: no
# Default:
# HistoryStorageURL=
{% if 'historystorageurl' in lcfg %}
HistoryStorageURL={{ lcfg.historystorageurl }}
{% endif %}
### Option: HistoryStorageTypes
#	Comma separated list of value types to be sent to the history storage.
#
# Mandatory: no
# Default:
# HistoryStorageTypes=uint,dbl,str,log,text
{% if 'historystoragetypes' in lcfg %}
    {%- if lcfg.historystoragetypes|is_list %}
HistoryStorageTypes={{ lcfg.historystoragetypes|join(',') }}
    {%- else %}
HistoryStorageTypes={{ lcfg.historystoragetypes }}
    {%- endif %}
{% endif %}
### Option: HistoryStorageDateIndex
#	Enable preprocessing of history values in history storage to store values in different indices based on date.
#	0 - disable
#	1 - enable
#
# Mandatory: no
# Default:
# HistoryStorageDateIndex=0
{% if 'historystoragedateindex' in lcfg %}
HistoryStorageDateIndex={{ lcfg.historystoragedateindex }}
{% endif %}
### Option: ExportDir
#	Directory for real time export of events, history and trends in newline delimited JSON format.
#	If set, enables real time export.
#
# Mandatory: no
# Default:
# ExportDir=
{% if 'exportdir' in lcfg %}
ExportDir={{ lcfg.exportdir }}
{% endif %}
### Option: ExportFileSize
#	Maximum size per export file in bytes.
#	Only used for rotation if ExportDir is set.
#
# Mandatory: no
# Range: 1M-1G
# Default:
# ExportFileSize=1G
{% if 'exportfilesize' in lcfg %}
ExportFileSize={{ lcfg.exportfilesize }}
{% endif %}
### Option: ExportType
#	List of comma delimited types of real time export - allows to control export entities by their
#	type (events, history, trends) individually.
#	Valid only if ExportDir is set.
#
# Mandatory: no
# Default:
# ExportType=events,history,trends
{% if 'exporttype' in lcfg %}
    {%- if lcfg.exporttype|is_list %}
ExportType={{ lcfg.exporttype|join(',') }}
    {%- else %}
ExportType={{ lcfg.exporttype }}
    {%- endif %}
{% endif %}
############ ADVANCED PARAMETERS ################

### Option: StartPollers
#	Number of pre-forked instances of pollers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartPollers=5
{% if 'startpollers' in lcfg %}
StartPollers={{ lcfg.startpollers }}
{% endif %}
### Option: StartIPMIPollers
#	Number of pre-forked instances of IPMI pollers.
#		The IPMI manager process is automatically started when at least one IPMI poller is started.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartIPMIPollers=0
{% if 'startipmipollers' in lcfg %}
StartIPMIPollers={{ lcfg.startipmipollers }}
{% endif %}
### Option: StartPreprocessors
#	Number of pre-forked instances of preprocessing workers.
#		The preprocessing manager process is automatically started when preprocessor worker is started.
#
# Mandatory: no
# Range: 1-1000
# Default:
# StartPreprocessors=3
{% if 'startpreprocessors' in lcfg %}
StartPreprocessors={{ lcfg.startpreprocessors }}
{% endif %}
### Option: StartPollersUnreachable
#	Number of pre-forked instances of pollers for unreachable hosts (including IPMI and Java).
#	At least one poller for unreachable hosts must be running if regular, IPMI or Java pollers
#	are started.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartPollersUnreachable=1
{% if 'startpollersunreachable' in lcfg %}
StartPollersUnreachable={{ lcfg.startpollersunreachable }}
{% endif %}
### Option: StartHistoryPollers
#	Number of pre-forked instances of history pollers.
#	Only required for calculated and internal checks.
#	A database connection is required for each history poller instance.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartHistoryPollers=5
{% if 'starthistorypollers' in lcfg %}
StartHistoryPollers={{ lcfg.starthistorypollers }}
{% endif %}
### Option: StartTrappers
#	Number of pre-forked instances of trappers.
#	Trappers accept incoming connections from Zabbix sender, active agents and active proxies.
#	At least one trapper process must be running to display server availability and view queue
#	in the frontend.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartTrappers=5
{% if 'starttrappers' in lcfg %}
StartTrappers={{ lcfg.starttrappers }}
{% endif %}
### Option: StartPingers
#	Number of pre-forked instances of ICMP pingers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartPingers=1
{% if 'startpingers' in lcfg %}
StartPingers={{ lcfg.startpingers }}
{% endif %}
### Option: StartDiscoverers
#	Number of pre-forked instances of discoverers.
#
# Mandatory: no
# Range: 0-250
# Default:
# StartDiscoverers=1
{% if 'startdiscoverers' in lcfg %}
StartDiscoverers={{ lcfg.startdiscoverers }}
{% endif %}
### Option: StartHTTPPollers
#	Number of pre-forked instances of HTTP pollers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartHTTPPollers=1
{% if 'starthttppollers' in lcfg %}
StartHTTPPollers={{ lcfg.starthttppollers }}
{% endif %}
### Option: StartTimers
#	Number of pre-forked instances of timers.
#	Timers process maintenance periods.
#	Only the first timer process handles host maintenance updates. Problem suppression updates are shared
#	between all timers.
#
# Mandatory: no
# Range: 1-1000
# Default:
# StartTimers=1
{% if 'starttimers' in lcfg %}
StartTimers={{ lcfg.starttimers }}
{% endif %}
### Option: StartEscalators
#	Number of pre-forked instances of escalators.
#
# Mandatory: no
# Range: 1-100
# Default:
# StartEscalators=1
{% if 'startescalators' in lcfg %}
StartEscalators={{ lcfg.startescalators }}
{% endif %}
### Option: StartAlerters
#	Number of pre-forked instances of alerters.
#	Alerters send the notifications created by action operations.
#
# Mandatory: no
# Range: 1-100
# Default:
# StartAlerters=3
{% if 'startalerters' in lcfg %}
StartAlerters={{ lcfg.startalerters }}
{% endif %}
### Option: JavaGateway
#	IP address (or hostname) of Zabbix Java gateway.
#	Only required if Java pollers are started.
#
# Mandatory: no
# Default:
# JavaGateway=
{% if 'javagateway' in lcfg %}
JavaGateway={{ lcfg.javagateway }}
{% endif %}
### Option: JavaGatewayPort
#	Port that Zabbix Java gateway listens on.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# JavaGatewayPort=10052
{% if 'javagatewayport' in lcfg %}
JavaGatewayPort={{ lcfg.javagatewayport }}
{% endif %}
### Option: StartJavaPollers
#	Number of pre-forked instances of Java pollers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartJavaPollers=0
{% if 'startjavapollers' in lcfg %}
StartJavaPollers={{ lcfg.startjavapollers }}
{% endif %}
### Option: StartVMwareCollectors
#	Number of pre-forked vmware collector instances.
#
# Mandatory: no
# Range: 0-250
# Default:
# StartVMwareCollectors=0
{% if 'startvmwarecollectors' in lcfg %}
StartVMwareCollectors={{ lcfg.startvmwarecollectors }}
{% endif %}
### Option: VMwareFrequency
#	How often Zabbix will connect to VMware service to obtain a new data.
#
# Mandatory: no
# Range: 10-86400
# Default:
# VMwareFrequency=60
{% if 'vmwarefrequency' in lcfg %}
VMwareFrequency={{ lcfg.vmwarefrequency }}
{% endif %}
### Option: VMwarePerfFrequency
#	How often Zabbix will connect to VMware service to obtain performance data.
#
# Mandatory: no
# Range: 10-86400
# Default:
# VMwarePerfFrequency=60
{% if 'vmwareperffrequency' in lcfg %}
VMwarePerfFrequency={{ lcfg.vmwareperffrequency }}
{% endif %}
### Option: VMwareCacheSize
#	Size of VMware cache, in bytes.
#	Shared memory size for storing VMware data.
#	Only used if VMware collectors are started.
#
# Mandatory: no
# Range: 256K-2G
# Default:
# VMwareCacheSize=8M
{% if 'vmwarecachesize' in lcfg %}
VMwareCacheSize={{ lcfg.vmwarecachesize }}
{% endif %}
### Option: VMwareTimeout
#	Specifies how many seconds vmware collector waits for response from VMware service.
#
# Mandatory: no
# Range: 1-300
# Default:
# VMwareTimeout=10
{% if 'vmwaretimeout' in lcfg %}
VMwareTimeout={{ lcfg.vmwaretimeout }}
{% endif %}
### Option: SNMPTrapperFile
#	Temporary file used for passing data from SNMP trap daemon to the server.
#	Must be the same as in zabbix_trap_receiver.pl or SNMPTT configuration file.
#
# Mandatory: no
# Default:
# SNMPTrapperFile=/tmp/zabbix_traps.tmp
{% if 'snmptrapperfile' in lcfg %}
SNMPTrapperFile={{ lcfg.snmptrapperfile }}
{% endif %}
### Option: StartSNMPTrapper
#	If 1, SNMP trapper process is started.
#
# Mandatory: no
# Range: 0-1
# Default:
# StartSNMPTrapper=0
{% if 'startsnmptrapper' in lcfg %}
StartSNMPTrapper={{ lcfg.startsnmptrapper }}
{% endif %}
### Option: ListenIP
#	List of comma delimited IP addresses that the trapper should listen on.
#	Trapper will listen on all network interfaces if this parameter is missing.
#
# Mandatory: no
# Default:
# ListenIP=0.0.0.0
{% if 'listenip' in lcfg %}
    {%- if lcfg.listenip|is_list %}
ListenIP={{ lcfg.listenip|join(',') }}
    {%- else %}
ListenIP={{ lcfg.listenip }}
    {%- endif %}
{% endif %}
### Option: HousekeepingFrequency
#	How often Zabbix will perform housekeeping procedure (in hours).
#	Housekeeping is removing outdated information from the database.
#	To prevent Housekeeper from being overloaded, no more than 4 times HousekeepingFrequency
#	hours of outdated information are deleted in one housekeeping cycle, for each item.
#	To lower load on server startup housekeeping is postponed for 30 minutes after server start.
#	With HousekeepingFrequency=0 the housekeeper can be only executed using the runtime control option.
#	In this case the period of outdated information deleted in one housekeeping cycle is 4 times the
#	period since the last housekeeping cycle, but not less than 4 hours and not greater than 4 days.
#
# Mandatory: no
# Range: 0-24
# Default:
# HousekeepingFrequency=1
{% if 'housekeepingfrequency' in lcfg %}
HousekeepingFrequency={{ lcfg.housekeepingfrequency }}
{% endif %}
### Option: MaxHousekeeperDelete
#	The table "housekeeper" contains "tasks" for housekeeping procedure in the format:
#	[housekeeperid], [tablename], [field], [value].
#	No more than 'MaxHousekeeperDelete' rows (corresponding to [tablename], [field], [value])
#	will be deleted per one task in one housekeeping cycle.
#	If set to 0 then no limit is used at all. In this case you must know what you are doing!
#
# Mandatory: no
# Range: 0-1000000
# Default:
# MaxHousekeeperDelete=5000
{% if 'maxhousekeeperdelete' in lcfg %}
MaxHousekeeperDelete={{ lcfg.maxhousekeeperdelete }}
{% endif %}
### Option: CacheSize
#	Size of configuration cache, in bytes.
#	Shared memory size for storing host, item and trigger data.
#
# Mandatory: no
# Range: 128K-64G
# Default:
# CacheSize=32M
{% if 'cachesize' in lcfg %}
CacheSize={{ lcfg.cachesize }}
{% endif %}
### Option: CacheUpdateFrequency
#	How often Zabbix will perform update of configuration cache, in seconds.
#
# Mandatory: no
# Range: 1-3600
# Default:
# CacheUpdateFrequency=60
{% if 'cacheupdatefrequency' in lcfg %}
CacheUpdateFrequency={{ lcfg.cacheupdatefrequency }}
{% endif %}
### Option: StartDBSyncers
#	Number of pre-forked instances of DB Syncers.
#
# Mandatory: no
# Range: 1-100
# Default:
# StartDBSyncers=4
{% if 'startdbsyncers' in lcfg %}
StartDBSyncers={{ lcfg.startdbsyncers }}
{% endif %}
### Option: HistoryCacheSize
#	Size of history cache, in bytes.
#	Shared memory size for storing history data.
#
# Mandatory: no
# Range: 128K-2G
# Default:
# HistoryCacheSize=16M
{% if 'historycachesize' in lcfg %}
HistoryCacheSize={{ lcfg.historycachesize }}
{% endif %}
### Option: HistoryIndexCacheSize
#	Size of history index cache, in bytes.
#	Shared memory size for indexing history cache.
#
# Mandatory: no
# Range: 128K-2G
# Default:
# HistoryIndexCacheSize=4M
{% if 'historyindexcachesize' in lcfg %}
HistoryIndexCacheSize={{ lcfg.historyindexcachesize }}
{% endif %}
### Option: TrendCacheSize
#	Size of trend write cache, in bytes.
#	Shared memory size for storing trends data.
#
# Mandatory: no
# Range: 128K-2G
# Default:
# TrendCacheSize=4M
{% if 'trendcachesize' in lcfg %}
TrendCacheSize={{ lcfg.trendcachesize }}
{% endif %}
### Option: TrendFunctionCacheSize
#	Size of trend function cache, in bytes.
#	Shared memory size for caching calculated trend function data.
#
# Mandatory: no
# Range: 128K-2G
# Default:
# TrendFunctionCacheSize=4M
{% if 'trendfunctioncachesize' in lcfg %}
TrendFunctionCacheSize={{ lcfg.trendfunctioncachesize }}
{% endif %}
### Option: ValueCacheSize
#	Size of history value cache, in bytes.
#	Shared memory size for caching item history data requests.
#	Setting to 0 disables value cache.
#
# Mandatory: no
# Range: 0,128K-64G
# Default:
# ValueCacheSize=8M
{% if 'valuecachesize' in lcfg %}
ValueCacheSize={{ lcfg.valuecachesize }}
{% endif %}
### Option: Timeout
#	Specifies how long we wait for agent, SNMP device or external check (in seconds).
#
# Mandatory: no
# Range: 1-30
# Default:
# Timeout=3
{% if 'timeout' in lcfg %}
Timeout={{ lcfg.timeout }}
{% endif %}
### Option: TrapperTimeout
#	Specifies how many seconds trapper may spend processing new data.
#
# Mandatory: no
# Range: 1-300
# Default:
# TrapperTimeout=300
{% if 'trappertimeout' in lcfg %}
TrapperTimeout={{ lcfg.trappertimeout }}
{% endif %}
### Option: UnreachablePeriod
#	After how many seconds of unreachability treat a host as unavailable.
#
# Mandatory: no
# Range: 1-3600
# Default:
# UnreachablePeriod=45
{% if 'unreachableperiod' in lcfg %}
UnreachablePeriod={{ lcfg.unreachableperiod }}
{% endif %}
### Option: UnavailableDelay
#	How often host is checked for availability during the unavailability period, in seconds.
#
# Mandatory: no
# Range: 1-3600
# Default:
# UnavailableDelay=60
{% if 'unavailabledelay' in lcfg %}
UnavailableDelay={{ lcfg.unavailabledelay }}
{% endif %}
### Option: UnreachableDelay
#	How often host is checked for availability during the unreachability period, in seconds.
#
# Mandatory: no
# Range: 1-3600
# Default:
# UnreachableDelay=15
{% if 'unreachabledelay' in lcfg %}
UnreachableDelay={{ lcfg.unreachabledelay }}
{% endif %}
### Option: AlertScriptsPath
#	Full path to location of custom alert scripts.
#	Default depends on compilation options.
#	To see the default path run command "zabbix_server --help".
#
# Mandatory: no
# Default:
# AlertScriptsPath=/usr/lib/zabbix/alertscripts
{% if 'alertscriptspath' in lcfg %}
AlertScriptsPath={{ lcfg.alertscriptspath }}
{% endif %}
### Option: ExternalScripts
#	Full path to location of external scripts.
#	Default depends on compilation options.
#	To see the default path run command "zabbix_server --help".
#
# Mandatory: no
# Default:
# ExternalScripts=/usr/lib/zabbix/externalscripts
{% if 'externalscripts' in lcfg %}
ExternalScripts={{ lcfg.externalscripts }}
{% endif %}
### Option: FpingLocation
#	Location of fping.
#	Make sure that fping binary has root ownership and SUID flag set.
#
# Mandatory: no
# Default:
# FpingLocation=/usr/sbin/fping
{% if 'fpinglocation' in lcfg %}
FpingLocation={{ lcfg.fpinglocation }}
{% endif %}
### Option: Fping6Location
#	Location of fping6.
#	Make sure that fping6 binary has root ownership and SUID flag set.
#	Make empty if your fping utility is capable to process IPv6 addresses.
#
# Mandatory: no
# Default:
# Fping6Location=/usr/sbin/fping6
{% if 'fping6location' in lcfg %}
Fping6Location={{ lcfg.fping6location }}
{% endif %}
### Option: SSHKeyLocation
#	Location of public and private keys for SSH checks and actions.
#
# Mandatory: no
# Default:
# SSHKeyLocation=
{% if 'sshkeylocation' in lcfg %}
SSHKeyLocation={{ lcfg.sshkeylocation }}
{% endif %}
### Option: LogSlowQueries
#	How long a database query may take before being logged (in milliseconds).
#	Only works if DebugLevel set to 3, 4 or 5.
#	0 - don't log slow queries.
#
# Mandatory: no
# Range: 1-3600000
# Default:
# LogSlowQueries=0
{% if 'logslowqueries' in lcfg %}
LogSlowQueries={{ lcfg.logslowqueries }}
{% endif %}
### Option: TmpDir
#	Temporary directory.
#
# Mandatory: no
# Default:
# TmpDir=/tmp
{% if 'tmpdir' in lcfg %}
TmpDir={{ lcfg.tmpdir }}
{% endif %}
### Option: StartProxyPollers
#	Number of pre-forked instances of pollers for passive proxies.
#
# Mandatory: no
# Range: 0-250
# Default:
# StartProxyPollers=1
{% if 'startproxypollers' in lcfg %}
StartProxyPollers={{ lcfg.startproxypollers }}
{% endif %}
### Option: ProxyConfigFrequency
#	How often Zabbix Server sends configuration data to a Zabbix Proxy in seconds.
#	This parameter is used only for proxies in the passive mode.
#
# Mandatory: no
# Range: 1-3600*24*7
# Default:
# ProxyConfigFrequency=3600
{% if 'proxyconfigfrequency' in lcfg %}
ProxyConfigFrequency={{ lcfg.proxyconfigfrequency }}
{% endif %}
### Option: ProxyDataFrequency
#	How often Zabbix Server requests history data from a Zabbix Proxy in seconds.
#	This parameter is used only for proxies in the passive mode.
#
# Mandatory: no
# Range: 1-3600
# Default:
# ProxyDataFrequency=1
{% if 'proxydatafrequency' in lcfg %}
ProxyDataFrequency={{ lcfg.proxydatafrequency }}
{% endif %}
### Option: StartLLDProcessors
#	Number of pre-forked instances of low level discovery processors.
#
# Mandatory: no
# Range: 1-100
# Default:
# StartLLDProcessors=2
{% if 'startlldprocessors' in lcfg %}
StartLLDProcessors={{ lcfg.startlldprocessors }}
{% endif %}
### Option: AllowRoot
#	Allow the server to run as 'root'. If disabled and the server is started by 'root', the server
#	will try to switch to the user specified by the User configuration option instead.
#	Has no effect if started under a regular user.
#	0 - do not allow
#	1 - allow
#
# Mandatory: no
# Default:
# AllowRoot=0
{% if 'allowroot' in lcfg %}
AllowRoot={{ lcfg.allowroot }}
{% endif %}
### Option: User
#	Drop privileges to a specific, existing user on the system.
#	Only has effect if run as 'root' and AllowRoot is disabled.
#
# Mandatory: no
# Default:
# User=zabbix
{% if 'user' in lcfg %}
User={{ lcfg.user }}
{% endif %}
### Option: Include
#	You may include individual files or all files in a directory in the configuration file.
#	Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time.
#
# Mandatory: no
# Default:
# Include=
{%- if 'include' in lcfg and lcfg['include'] is string %}
    {%- do lcfg.update({'includes': [lcfg['include']]}) %}
{%- endif %}
{% if 'includes' in lcfg %}
    {%- for include in lcfg.get('includes',[]) %}
Include={{ include }}
    {%- endfor %}
{% endif %}
# Include=/usr/local/etc/zabbix_server.general.conf
# Include=/usr/local/etc/zabbix_server.conf.d/
# Include=/usr/local/etc/zabbix_server.conf.d/*.conf

### Option: SSLCertLocation
#	Location of SSL client certificates.
#	This parameter is used only in web monitoring.
#	Default depends on compilation options.
#	To see the default path run command "zabbix_server --help".
#
# Mandatory: no
# Default:
# SSLCertLocation=${datadir}/zabbix/ssl/certs
{% if 'sslcertlocation' in lcfg %}
SSLCertLocation={{ lcfg.sslcertlocation }}
{% endif %}
### Option: SSLKeyLocation
#	Location of private keys for SSL client certificates.
#	This parameter is used only in web monitoring.
#	Default depends on compilation options.
#	To see the default path run command "zabbix_server --help".
#
# Mandatory: no
# Default:
# SSLKeyLocation=${datadir}/zabbix/ssl/keys
{% if 'sslkeylocation' in lcfg %}
SSLKeyLocation={{ lcfg.sslkeylocation }}
{% endif %}
### Option: SSLCALocation
#	Override the location of certificate authority (CA) files for SSL server certificate verification.
#	If not set, system-wide directory will be used.
#	This parameter is used in web monitoring, SMTP authentication, HTTP agent items and for communication with Vault.
#
# Mandatory: no
# Default:
# SSLCALocation=
{% if 'sslcalocation' in lcfg %}
SSLCALocation={{ lcfg.sslcalocation }}
{% endif %}
### Option: StatsAllowedIP
#	List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of external Zabbix instances.
#	Stats request will be accepted only from the addresses listed here. If this parameter is not set no stats requests
#	will be accepted.
#	If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally
#	and '::/0' will allow any IPv4 or IPv6 address.
#	'0.0.0.0/0' can be used to allow any IPv4 address.
#	Example: StatsAllowedIP=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com
#
# Mandatory: no
# Default:
# StatsAllowedIP=
{% if 'statsallowedip' in lcfg %}
    {%- if lcfg.statsallowedip|is_list %}
StatsAllowedIP={{ lcfg.statsallowedip|join(',') }}
    {%- else %}
StatsAllowedIP={{ lcfg.statsallowedip }}
    {%- endif %}
{% endif %}
####### LOADABLE MODULES #######

### Option: LoadModulePath
#	Full path to location of server modules.
#	Default depends on compilation options.
#	To see the default path run command "zabbix_server --help".
#
# Mandatory: no
# Default:
# LoadModulePath=${libdir}/modules
{% if 'loadmodulepath' in lcfg %}
LoadModulePath={{ lcfg.loadmodulepath }}
{% endif %}
### Option: LoadModule
#	Module to load at server startup. Modules are used to extend functionality of the server.
#	Formats:
#		LoadModule=<module.so>
#		LoadModule=<path/module.so>
#		LoadModule=</abs_path/module.so>
#	Either the module must be located in directory specified by LoadModulePath or the path must precede the module name.
#	If the preceding path is absolute (starts with '/') then LoadModulePath is ignored.
#	It is allowed to include multiple LoadModule parameters.
#
# Mandatory: no
# Default:
# LoadModule=
{%- if 'loadmodule' in lcfg and lcfg['loadmodule'] is string %}
    {%- do lcfg.update({'loadmodules': [lcfg['loadmodule']]}) %}
{%- endif %}
{% if 'loadmodules' in lcfg %}
    {%- for loadmodule in lcfg.get('loadmodules',[]) %}
LoadModule={{ loadmodule }}
    {%- endfor %}
{% endif %}
####### TLS-RELATED PARAMETERS #######

### Option: TLSCAFile
#	Full pathname of a file containing the top-level CA(s) certificates for
#	peer certificate verification.
#
# Mandatory: no
# Default:
# TLSCAFile=
{% if 'tlscafile' in lcfg %}
TLSCAFile={{ lcfg.tlscafile }}
{% endif %}
### Option: TLSCRLFile
#	Full pathname of a file containing revoked certificates.
#
# Mandatory: no
# Default:
# TLSCRLFile=
{% if 'tlscrlfile' in lcfg %}
TLSCRLFile={{ lcfg.tlscrlfile }}
{% endif %}
### Option: TLSCertFile
#	Full pathname of a file containing the server certificate or certificate chain.
#
# Mandatory: no
# Default:
# TLSCertFile=
{% if 'tlscertfile' in lcfg %}
TLSCertFile={{ lcfg.tlscertfile }}
{% endif %}
### Option: TLSKeyFile
#	Full pathname of a file containing the server private key.
#
# Mandatory: no
# Default:
# TLSKeyFile=
{% if 'tlskeyfile' in lcfg %}
TLSKeyFile={{ lcfg.tlskeyfile }}
{% endif %}
####### For advanced users - TLS ciphersuite selection criteria #######

### Option: TLSCipherCert13
#	Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.
#	Override the default ciphersuite selection criteria for certificate-based encryption.
#
# Mandatory: no
# Default:
# TLSCipherCert13=
{% if 'tlsciphercert13' in lcfg %}
TLSCipherCert13={{ lcfg.tlsciphercert13 }}
{% endif %}
### Option: TLSCipherCert
#	GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.
#	Override the default ciphersuite selection criteria for certificate-based encryption.
#	Example for GnuTLS:
#		NONE:+VERS-TLS1.2:+ECDHE-RSA:+RSA:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL:+CTYPE-X.509
#	Example for OpenSSL:
#		EECDH+aRSA+AES128:RSA+aRSA+AES128
#
# Mandatory: no
# Default:
# TLSCipherCert=
{% if 'tlsciphercert' in lcfg %}
TLSCipherCert={{ lcfg.tlsciphercert }}
{% endif %}
### Option: TLSCipherPSK13
#	Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.
#	Override the default ciphersuite selection criteria for PSK-based encryption.
#	Example:
#		TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
#
# Mandatory: no
# Default:
# TLSCipherPSK13=
{% if 'tlscipherpsk13' in lcfg %}
TLSCipherPSK13={{ lcfg.tlscipherpsk13 }}
{% endif %}
### Option: TLSCipherPSK
#	GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.
#	Override the default ciphersuite selection criteria for PSK-based encryption.
#	Example for GnuTLS:
#		NONE:+VERS-TLS1.2:+ECDHE-PSK:+PSK:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL
#	Example for OpenSSL:
#		kECDHEPSK+AES128:kPSK+AES128
#
# Mandatory: no
# Default:
# TLSCipherPSK=
{% if 'tlscipherpsk' in lcfg %}
TLSCipherPSK={{ lcfg.tlscipherpsk }}
{% endif %}
### Option: TLSCipherAll13
#	Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.
#	Override the default ciphersuite selection criteria for certificate- and PSK-based encryption.
#	Example:
#		TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
#
# Mandatory: no
# Default:
# TLSCipherAll13=
{% if 'tlscipherall13' in lcfg %}
TLSCipherAll13={{ lcfg.tlscipherall13 }}
{% endif %}
### Option: TLSCipherAll
#	GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.
#	Override the default ciphersuite selection criteria for certificate- and PSK-based encryption.
#	Example for GnuTLS:
#		NONE:+VERS-TLS1.2:+ECDHE-RSA:+RSA:+ECDHE-PSK:+PSK:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL:+CTYPE-X.509
#	Example for OpenSSL:
#		EECDH+aRSA+AES128:RSA+aRSA+AES128:kECDHEPSK+AES128:kPSK+AES128
#
# Mandatory: no
# Default:
# TLSCipherAll=
{% if 'tlscipherall' in lcfg %}
TLSCipherAll={{ lcfg.tlscipherall }}
{% endif %}
### Option: DBTLSConnect
#	Setting this option enforces to use TLS connection to database.
#	required    - connect using TLS
#	verify_ca   - connect using TLS and verify certificate
#	verify_full - connect using TLS, verify certificate and verify that database identity specified by DBHost
#	              matches its certificate
#	On MySQL starting from 5.7.11 and PostgreSQL following values are supported: "required", "verify_ca" and
#	"verify_full".
#	On MariaDB starting from version 10.2.6 "required" and "verify_full" values are supported.
#	Default is not to set any option and behavior depends on database configuration
#
# Mandatory: no
# Default:
# DBTLSConnect=
{% if 'dbtlsconnect' in lcfg %}
DBTLSConnect={{ lcfg.dbtlsconnect }}
{% endif %}
### Option: DBTLSCAFile
#	Full pathname of a file containing the top-level CA(s) certificates for database certificate verification.
#	Supported only for MySQL and PostgreSQL
#
# Mandatory: no
#	(yes, if DBTLSConnect set to one of: verify_ca, verify_full)
# Default:
# DBTLSCAFile=
{% if 'dbtlscafile' in lcfg %}
DBTLSCAFile={{ lcfg.dbtlscafile }}
{% endif %}
### Option: DBTLSCertFile
#	Full pathname of file containing Zabbix server certificate for authenticating to database.
#	Supported only for MySQL and PostgreSQL
#
# Mandatory: no
# Default:
# DBTLSCertFile=
{% if 'dbtlscertfile' in lcfg %}
DBTLSCertFile={{ lcfg.dbtlscertfile }}
{% endif %}
### Option: DBTLSKeyFile
#	Full pathname of file containing the private key for authenticating to database.
#	Supported only for MySQL and PostgreSQL
#
# Mandatory: no
# Default:
# DBTLSKeyFile=
{% if 'dbtlskeyfile' in lcfg %}
DBTLSKeyFile={{ lcfg.dbtlskeyfile }}
{% endif %}
### Option: DBTLSCipher
#	The list of encryption ciphers that Zabbix server permits for TLS protocols up through TLSv1.2
#	Supported only for MySQL
#
# Mandatory no
# Default:
# DBTLSCipher=
{% if 'dbtlscipher' in lcfg %}
DBTLSCipher={{ lcfg.dbtlscipher }}
{% endif %}
### Option: DBTLSCipher13
#	The list of encryption ciphersuites that Zabbix server permits for TLSv1.3 protocol
#	Supported only for MySQL, starting from version 8.0.16
#
# Mandatory no
# Default:
# DBTLSCipher13=
{% if 'dbtlscipher13' in lcfg %}
DBTLSCipher13={{ lcfg.dbtlscipher13 }}
{% endif %}
### Option: VaultToken
#	Vault authentication token that should have been generated exclusively for Zabbix server with read only permission
#	to paths specified in Vault macros and read only permission to path specified in optional VaultDBPath
#	configuration parameter.
#	It is an error if VaultToken and VAULT_TOKEN environment variable are defined at the same time.
#
# Mandatory: no
# Default:
# VaultToken=
{% if 'vaulttoken' in lcfg %}
VaultToken={{ lcfg.vaulttoken }}
{% endif %}
### Option: VaultURL
#	Vault server HTTP[S] URL. System-wide CA certificates directory will be used if SSLCALocation is not specified.
#
# Mandatory: no
# Default:
# VaultURL=https://127.0.0.1:8200
{% if 'vaulturl' in lcfg %}
VaultURL={{ lcfg.vaulturl }}
{% endif %}
### Option: VaultDBPath
#	Vault path from where credentials for database will be retrieved by keys 'password' and 'username'.
#	Example: secret/zabbix/database
#	This option can only be used if DBUser and DBPassword are not specified.
#
# Mandatory: no
# Default:
# VaultDBPath=
{% if 'vaultdbpath' in lcfg %}
VaultDBPath={{ lcfg.vaultdbpath }}
{% endif %}
### Option: StartReportWriters
#	Number of pre-forked report writer instances.
#
# Mandatory: no
# Range: 0-100
# Default:
# StartReportWriters=0
{% if 'startreportwriters' in lcfg %}
StartReportWriters={{ lcfg.startreportwriters }}
{% endif %}
### Option: WebServiceURL
#	URL to Zabbix web service, used to perform web related tasks.
#	Example: http://localhost:10053/report
#
# Mandatory: no
# Default:
# WebServiceURL=
{% if 'webserviceurl' in lcfg %}
WebServiceURL={{ lcfg.webserviceurl }}
{% endif %}
### Option: ServiceManagerSyncFrequency
#	How often Zabbix will synchronize configuration of a service manager (in seconds).
#
# Mandatory: no
# Range: 1-3600
# Default:
# ServiceManagerSyncFrequency=60
{% if 'servicemanagersyncfrequency' in lcfg %}
ServiceManagerSyncFrequency={{ lcfg.servicemanagersyncfrequency }}
{% endif %}
### Option: ProblemHousekeepingFrequency
#	How often Zabbix will delete problems for deleted triggers (in seconds).
#
# Mandatory: no
# Range: 1-3600
# Default:
# ProblemHousekeepingFrequency=60
{% if 'problemhousekeepingfrequency' in lcfg %}
ProblemHousekeepingFrequency={{ lcfg.problemhousekeepingfrequency }}
{% endif %}
## Option: StartODBCPollers
#	Number of pre-forked ODBC poller instances.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartODBCPollers=1
{% if 'startodbcpollers' in lcfg %}
StartODBCPollers={{ lcfg.startodbcpollers }}
{% endif %}
####### For advanced users - TCP-related fine-tuning parameters #######

## Option: ListenBacklog
#       The maximum number of pending connections in the queue. This parameter is passed to
#       listen() function as argument 'backlog' (see "man listen").
#
# Mandatory: no
# Range: 0 - INT_MAX (depends on system, too large values may be silently truncated to implementation-specified maximum)
# Default: SOMAXCONN (hard-coded constant, depends on system)
# ListenBacklog=


####### High availability cluster parameters #######

## Option: HANodeName
#	The high availability cluster node name.
#	When empty, server is working in standalone mode; a node with empty name is registered with address for the frontend to connect to.
#
# Mandatory: no
# Default:
# HANodeName=
{% if 'hanodename' in lcfg %}
HANodeName={{ lcfg.hanodename }}
{% endif %}
## Option: NodeAddress
#	IP or hostname with optional port to specify how frontend should connect to the server.
#	Format: <address>[:port]
#
#	This option can be overridden by address specified in frontend configuration.
#
# Mandatory: no
# Default:
# NodeAddress=localhost:10051
{% if 'nodeaddress' in lcfg %}
NodeAddress={{ lcfg.nodeaddress }}
{% endif %}
