---
zabbix:
  use_official_repo: true
  repo:
    # Default - latest LTS version
    version: 5.0
    # Check osafamilymap.yaml for more examples
    # List of packages to install before configuring zabbix repository
    # i.e. for Debian family
    prerequisites:
      - apt-transport-https
      - ca-certificates
    # Repository configurationm will be used as pkgrepo.managed parameters
    config:
      # i.e. for Debian family
      name: deb https://repo.zabbix.com/zabbix/5.0/{{ grains.os|lower }} {{ grains.oscodename }} main
      file: /etc/apt/sources.list.d/zabbix.list
      key_url: https://repo.zabbix.com/zabbix-official-repo.key
      clean_file: true
  package:
    # Default version to use for packages, can be overriden by providing 'version'
    # key for agent, server frontend, proxy
    # default is unset
    # i.e. for Debian family
    # version: '1:4.0.*'
    # i.e. for RedHat family
    # version: 4.0.*
  # System user and group, will be created after packages are installed
  user: zabbix
  group: zabbix
  # Zabbix user has to be member of some groups in order to have permissions to
  # execute or read some things
  user_groups: []
  # Home folder for zabbix user
  # WIP won't be created for now
  # home: ''
  # shell for zabbix user
  shell: /usr/sbin/nologin
  ## DB parameters
  db:
    type: pgsql
    # Manage DB - create user and database
    manage: true
    # Import SQL file provided by zabbix package
    import_schema: true
    # DB host, you can provide IP or name if zabbix database is running on dedicated server
    host: localhost
    # DB name, user and password, those options will be used in Zabbix server and frontend configuration if
    # you don't provide explicit values under 'config:data' key
    name: zabbix
    user: zabbix
    password: zabbix
    # DB type specific parameters
    pgsql:
      sql_file: /usr/share/doc/zabbix-server-pgsql/create.sql.gz
      # Super user parameters can be helpful if zabbix database is running on dedicated server
      root:
        user: postgres
        password: ''
      # Install packages required for Salt to manipulate database?
      helper_pkgs_install: true
      # List of required helper packages
      helper_pkgs:
        - postgresql-client-common
        - postgresql-client
      # Schema to use, optional
      # schema: public
    mysql:
      sql_file: ''
      root:
        user: root
        password: ''
  ## Server
  server:
    install: false
    # Choose DB type
    # default is 'pgsql'
    # db:
    #   type: mysql
    # Zabbix server service parameters
    service:
      name: zabbix-server
      # After install service desired status - running / dead
      status: running
      # On boot service desired status - enabled / disabled
      on_boot_state: enabled
      # use reload instead of restart
      reload: false
    package:
      # Zabbix server package version, if not set zabbix:package:version will be used
      # default is unset
      # version: '1:4.0.*+buster*'
      hold: false
      update_holds: true
      install_recommends: false
      pkgs_extra: {}
    pgsql:
      package:
        pkgs:
          - zabbix-server-pgsql
    mysql:
      package:
        pkgs:
          - zabbix-server-mysql
    config:
      file: /etc/zabbix/zabbix_server.conf
      data:
        logfile: /var/log/zabbix/zabbix_server.log
        logfilesize: 0
        pidfile: /var/run/zabbix/zabbix_server.pid
        socketdir: /var/run/zabbix
        # If not defined DB parameters will be taken form zabbix.db.name, zabbix.db.user, zabbix.db.password
        # dbname: zabbix
        # dbuser: zabbix
        # dbpassword: zabbix
        snmptrapperfile: /var/log/snmptrap/snmptrap.log
        timeout: 4
        alertscriptspath: /usr/lib/zabbix/alertscripts
        externalscripts: /usr/lib/zabbix/externalscripts
        fpinglocation: /usr/bin/fping
        fping6location: /usr/bin/fping6
        logslowqueries: 3000
        statsallowedip: 127.0.0.1
  ## Frontend
  frontend:
    install: false
    package:
      # Zabbix server package version, if not set zabbix:package:version will be used
      # default is unset
      # version: '1:4.0.*+buster*'
      pkgs:
        - zabbix-frontend-php
        # since version 4.4 additional package required to configure web server and install dependencies
        # zabbix-nginx-conf can be used also, but apache version just work,
        # while nginx version require some additional configuration actions
        - zabbix-apache-conf
      hold: false
      update_holds: true
      install_recommends: true
    # DB specific parameters
    pgsql:
      package:
        pkgs:
          - zabbix-frontend-php
          - zabbix-apache-conf
          - php-pgsql
      config:
        data:
          db:
            type: POSTGRESQL
    mysql:
      package:
        pkgs:
          - zabbix-frontend-php
          - zabbix-apache-conf
      config:
        data:
          db:
            type: MYSQL
    config:
      file: /etc/zabbix/web/zabbix.conf.php
      data:
        db:
          server: localhost
          port: 0
          # If not defined DB parameters will be taken form
          # zabbix.db.name, zabbix.db.user, zabbix.db.password, zabbix.db.schema
          # database: zabbix
          # user: zabbix
          # password: zabbix
          # schema: ''
          encryption: false
          key_file:  ''
          cert_file: ''
          ca_file:  ''
          verify_host: false
          cipher_list: ''
          vault_url: ''
          vault_db_path: ''
          vault_token: ''
          double_ieee754: true
        zbx_server:	localhost
        zbx_server_port: 10051
        zbx_server_name: ''
        # TODO support history and sso parameters
        # history: []
        # history:
        #   url: http://localhost:9200
        #   types:
        #     - uint
        #     - text
        # history:
        #   url:
        #     - uint: http://localhost:9200
        #     - text: http://localhost:9200
        #   types:
        #     - uint
        #     - text
        # sso:
        #   sp_key: 'conf/certs/sp.key'
        #   sp_cert: 'conf/certs/sp.crt'
        #   idp_cert: 'conf/certs/idp.crt'
        #   settings: []
  ## Agent
  agent:
    install: false
    # Zabbix agent service parameters
    service:
      name: zabbix-agent
      # After install service desired status - running / dead
      status: running
      # On boot service desired status - enabled / disabled
      on_boot_state: enabled
      # use reload instead of restart
      reload: false
    package:
      # Zabbix agent package version, if not set zabbix:package:version will be used
      # default is unset
      # version: '1:4.0.*+buster*'
      pkgs:
        - zabbix-agent
      hold: false
      update_holds: true
      install_recommends: true
      pkgs_extra: {}
    config:
      file: /etc/zabbix/zabbix_agentd.conf
      data:
        pidfile: /var/run/zabbix/zabbix_agentd.pid
        logfile: /var/log/zabbix/zabbix_agentd.log
        logfilesize: 0
        server: 127.0.0.1
        serveractive: 127.0.0.1
        hostname: {{ grains.id }}
        includes:
          - /etc/zabbix/zabbix_agentd.d/*.conf
      extra:
        # extra configuration files to manage
        file:
          # uniq id
          template_db_mysql:
            # ensure mode (optional) - 'present' or 'absent', file will be created or removed respectively
            # default is 'present'
            ensure: present
            # full path on the target minion
            name: /etc/zabbix/zabbix_agent.d/template_db_mysql.conf
            # use source file
            #source: salt://zabbix/agent/template_db_mysql.conf
            # OR
            # contents / contents_pillar
            contents: |
                UserParameter=mysql.ping[*], mysqladmin -h"$1" -P"$2" ping
                UserParameter=mysql.get_status_variables[*], mysql -h"$1" -P"$2" -sNX -e "show global status"
                UserParameter=mysql.version[*], mysqladmin -s -h"$1" -P"$2" version
                UserParameter=mysql.db.discovery[*], mysql -h"$1" -P"$2" -sN -e "show databases"
                UserParameter=mysql.dbsize[*], mysql -h"$1" -P"$2" -sN -e "SELECT COALESCE(SUM(DATA_LENGTH + INDEX_LENGTH),0) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='$3'"
                UserParameter=mysql.replication.discovery[*], mysql -h"$1" -P"$2" -sNX -e "show slave status"
                UserParameter=mysql.slave_status[*], mysql -h"$1" -P"$2" -sNX -e "show slave status"
            # any other file.managed options
            makedirs: true
            mode: "0644"
        # whole directory with configuration files, basically wrapper around file.recurse
        # see example below in agent2 section
        directory: {}
  ## Agent2
  agent2:
    install: false
    # Zabbix agent2 service parameters
    service:
      name: zabbix-agent2
      # After install service desired status - running / dead
      status: running
      # On boot service desired status - enabled / disabled
      on_boot_state: enabled
      # use reload instead of restart
      reload: false
    package:
      # Zabbix agent2 package version, if not set zabbix:package:version will be used
      # default is unset
      # version: '1:4.0.*+buster*'
      pkgs:
        - zabbix-agent2
      hold: false
      update_holds: true
      install_recommends: true
      pkgs_extra: {}
    config:
      file: /etc/zabbix/zabbix_agent2.conf
      data:
        pidfile: /run/zabbix/zabbix_agent2.pid
        logfile: /var/log/zabbix/zabbix_agent2.log
        logfilesize: 0
        server: 127.0.0.1
        serveractive: 127.0.0.1
        hostname: {{ grains.id }}
        includes:
          - /etc/zabbix/zabbix_agent2.d/*.conf
        controlsocket: /tmp/agent.sock
      extra:
        file: {}
        directory:
          # copy bunch of agent2 plugin configuration files to minion
          plugins_configuration:
            ensure: present
            # all files from `source` directory will be copied to
            # destination directory specified as value for `name` key
            name: /etc/zabbix/zabbix_agent2.d/plugins.d
            # i.e. we have dir with config files like
            # plugins.d/
            # ├── ceph.conf
            # ├── docker.conf
            # ├── memcached.conf
            # ├── modbus.conf
            # ├── mqtt.conf
            # ├── mysql.conf
            # ├── oracle.conf
            # ├── postgres.conf
            # ├── redis.conf
            # └── smart.conf
            source: salt://zabbix/agent2/plugins.d
  ## Proxy
  proxy: {}
